import math

def forward_kinematics(self,image):
    joints = self.detect_joint_angles(image)
    end_effector = np.array([(-3*math.cos(joints[0]+joints[1]+joints[2])+3*math.cos(joints[0]-joints[1]+joints[2])-3*math.cos(joints[0]+joints[1]-joints[2])+3*math.cos(joints[0]-joints[1]-joints[2])-2*math.cos(joints[0]+joints[1]+joints[3])-2*math.cos(joints[0]-joints[1]+joints[3])-math.cos(joints[0]+joints[1]+joints[2]+joints[3])+math.cos(joints[0]-joints[1]+joints[2]+joints[3])-math.cos(joints[0]+joints[1]-joints[2]+joints[3])+math.cos(joints[0]-joints[1]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[1]-joints[3])+2*math.cos(joints[0]-joints[1]-joints[3])-math.cos(joints[0]+joints[1]+joints[2]-joints[3])+math.cos(joints[0]-joints[1]+joints[2]-joints[3])-math.cos(joints[0]+joints[1]-joints[2]-joints[3])+math.cos(joints[0]-joints[1]-joints[2]-joints[3])+6*math.sin(joints[0]+joints[2])-6*math.sin(joints[0]-joints[2])+2*math.sin(joints[0]+joints[2]+joints[3])-2*math.sin(joints[0]-joints[2]+joints[3])+2*math.sin(joints[0]+joints[2]-joints[3])-2*math.sin(joints[0]-joints[2]-joints[3]))/4,
                             (-6*math.cos(joints[0]+joints[2])+6*math.cos(joints[0]-joints[2])-2*math.cos(joints[0]+joints[2]+joints[3])+2*math.cos(joints[0]-joints[2]+joints[3])-2*math.cos(joints[0]+joints[2]-joints[3])+2*math.cos(joints[0]-joints[2]-joints[3])-3*math.sin(joints[0]+joints[1]+joints[2])+3*math.sin(joints[0]-joints[1]+joints[2])-3*math.sin(joints[0]+joints[1]-joints[2])+3*math.sin(joints[0]-joints[1]-joints[2])-2*math.sin(joints[0]+joints[1]+joints[3])-2*math.sin(joints[0]-joints[1]+joints[3])-math.sin(joints[0]+joints[1]+joints[2]+joints[3])+math.sin(joints[0]-joints[1]+joints[2]+joints[3])-math.sin(joints[0]+joints[1]-joints[2]+joints[3])+math.sin(joints[0]-joints[1]-joints[2]+joints[3])+2*math.sin(joints[0]+joints[1]-joints[3])+2*math.sin(joints[0]-joints[1]-joints[3])-math.sin(joints[0]+joints[1]+joints[2]-joints[3])+math.sin(joints[0]-joints[1]+joints[2]-joints[3])-math.sin(joints[0]+joints[1]-joints[2]-joints[3])+math.sin(joints[0]-joints[1]-joints[2]-joints[3]))/4,
                             (3*math.cos(joints[1]+joints[2])+3*math.cos(joints[1]-joints[2])+2*math.cos(joints[1]+joints[3])+math.cos(joints[1]+joints[2]+joints[3])+math.cos(joints[1]-joints[2]+joints[3])-2*math.cos(joints[1]-joints[3])+math.cos(joints[1]+joints[2]-joints[3])+math.cos(joints[1]-joints[2]-joints[3])+4)/2])
    return end_effector

def calculate_jacobian(self,image):
    joints = self.detect_joint_angles(image)
    jacobian = np.array([[(-3*-math.sin(joints[0]+joints[1]+joints[2])+3*-math.sin(joints[0]-joints[1]+joints[2])-3*-math.sin(joints[0]+joints[1]-joints[2])+3*-math.sin(joints[0]-joints[1]-joints[2])-2*-math.sin(joints[0]+joints[1]+joints[3])-2*-math.sin(joints[0]-joints[1]+joints[3])+math.sin(joints[0]+joints[1]+joints[2]+joints[3])+-math.sin(joints[0]-joints[1]+joints[2]+joints[3])+math.sin(joints[0]+joints[1]-joints[2]+joints[3])+-math.sin(joints[0]-joints[1]-joints[2]+joints[3])+2*-math.sin(joints[0]+joints[1]-joints[3])+2*-math.sin(joints[0]-joints[1]-joints[3])+math.sin(joints[0]+joints[1]+joints[2]-joints[3])+-math.sin(joints[0]-joints[1]+joints[2]-joints[3])+math.sin(joints[0]+joints[1]-joints[2]-joints[3])+-math.sin(joints[0]-joints[1]-joints[2]-joints[3])+6*math.cos(joints[0]+joints[2])-6*math.cos(joints[0]-joints[2])+2*math.cos(joints[0]+joints[2]+joints[3])-2*math.cos(joints[0]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[2]-joints[3])-2*math.cos(joints[0]-joints[2]-joints[3]))/4,
                          (-3*-math.sin(joints[0]+joints[1]+joints[2])+3*-math.sin(joints[0]-joints[1]+joints[2])-3*-math.sin(joints[0]+joints[1]-joints[2])+3*-math.sin(joints[0]-joints[1]-joints[2])-2*-math.sin(joints[0]+joints[1]+joints[3])-2*-math.sin(joints[0]-joints[1]+joints[3])+math.sin(joints[0]+joints[1]+joints[2]+joints[3])+-math.sin(joints[0]-joints[1]+joints[2]+joints[3])+math.sin(joints[0]+joints[1]-joints[2]+joints[3])+-math.sin(joints[0]-joints[1]-joints[2]+joints[3])+2*-math.sin(joints[0]+joints[1]-joints[3])+2*-math.sin(joints[0]-joints[1]-joints[3])+math.sin(joints[0]+joints[1]+joints[2]-joints[3])+-math.sin(joints[0]-joints[1]+joints[2]-joints[3])+math.sin(joints[0]+joints[1]-joints[2]-joints[3])+-math.sin(joints[0]-joints[1]-joints[2]-joints[3]))/4,
                          (-3*-math.sin(joints[0]+joints[1]+joints[2])+3*-math.sin(joints[0]-joints[1]+joints[2])-3*-math.sin(joints[0]+joints[1]-joints[2])+3*-math.sin(joints[0]-joints[1]-joints[2]) +math.sin(joints[0]+joints[1]+joints[2]+joints[3])+-math.sin(joints[0]-joints[1]+joints[2]+joints[3])+math.sin(joints[0]+joints[1]-joints[2]+joints[3])+-math.sin(joints[0]-joints[1]-joints[2]+joints[3]) +math.sin(joints[0]+joints[1]+joints[2]-joints[3])+-math.sin(joints[0]-joints[1]+joints[2]-joints[3])+math.sin(joints[0]+joints[1]-joints[2]-joints[3])+-math.sin(joints[0]-joints[1]-joints[2]-joints[3])+6*math.cos(joints[0]+joints[2])-6*math.cos(joints[0]-joints[2])+2*math.cos(joints[0]+joints[2]+joints[3])-2*math.cos(joints[0]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[2]-joints[3])-2*math.cos(joints[0]-joints[2]-joints[3]))/4,
                          (-2*-math.sin(joints[0]+joints[1]+joints[3])-2*-math.sin(joints[0]-joints[1]+joints[3])+math.sin(joints[0]+joints[1]+joints[2]+joints[3])+-math.sin(joints[0]-joints[1]+joints[2]+joints[3])+math.sin(joints[0]+joints[1]-joints[2]+joints[3])+-math.sin(joints[0]-joints[1]-joints[2]+joints[3])+2*-math.sin(joints[0]+joints[1]-joints[3])+2*-math.sin(joints[0]-joints[1]-joints[3])+math.sin(joints[0]+joints[1]+joints[2]-joints[3])+-math.sin(joints[0]-joints[1]+joints[2]-joints[3])+math.sin(joints[0]+joints[1]-joints[2]-joints[3])+-math.sin(joints[0]-joints[1]-joints[2]-joints[3])+2*math.cos(joints[0]+joints[2]+joints[3])-2*math.cos(joints[0]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[2]-joints[3])-2*math.cos(joints[0]-joints[2]-joints[3]))/4],
                         [(-6*-math.sin(joints[0]+joints[2])+6*-math.sin(joints[0]-joints[2])-2*-math.sin(joints[0]+joints[2]+joints[3])+2*-math.sin(joints[0]-joints[2]+joints[3])-2*-math.sin(joints[0]+joints[2]-joints[3])+2*-math.sin(joints[0]-joints[2]-joints[3])-3*math.cos(joints[0]+joints[1]+joints[2])+3*math.cos(joints[0]-joints[1]+joints[2])-3*math.cos(joints[0]+joints[1]-joints[2])+3*math.cos(joints[0]-joints[1]-joints[2])-2*math.cos(joints[0]+joints[1]+joints[3])-2*math.cos(joints[0]-joints[1]+joints[3])-math.cos(joints[0]+joints[1]+joints[2]+joints[3])+math.cos(joints[0]-joints[1]+joints[2]+joints[3])-math.cos(joints[0]+joints[1]-joints[2]+joints[3])+math.cos(joints[0]-joints[1]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[1]-joints[3])+2*math.cos(joints[0]-joints[1]-joints[3])-math.cos(joints[0]+joints[1]+joints[2]-joints[3])+math.cos(joints[0]-joints[1]+joints[2]-joints[3])-math.cos(joints[0]+joints[1]-joints[2]-joints[3])+math.cos(joints[0]-joints[1]-joints[2]-joints[3]))/4,
                          (-3*math.cos(joints[0]+joints[1]+joints[2])+3*math.cos(joints[0]-joints[1]+joints[2])-3*math.cos(joints[0]+joints[1]-joints[2])+3*math.cos(joints[0]-joints[1]-joints[2])-2*math.cos(joints[0]+joints[1]+joints[3])-2*math.cos(joints[0]-joints[1]+joints[3])-math.cos(joints[0]+joints[1]+joints[2]+joints[3])+math.cos(joints[0]-joints[1]+joints[2]+joints[3])-math.cos(joints[0]+joints[1]-joints[2]+joints[3])+math.cos(joints[0]-joints[1]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[1]-joints[3])+2*math.cos(joints[0]-joints[1]-joints[3])-math.cos(joints[0]+joints[1]+joints[2]-joints[3])+math.cos(joints[0]-joints[1]+joints[2]-joints[3])-math.cos(joints[0]+joints[1]-joints[2]-joints[3])+math.cos(joints[0]-joints[1]-joints[2]-joints[3]))/4,
                          (-6*-math.sin(joints[0]+joints[2])+6*-math.sin(joints[0]-joints[2])-2*-math.sin(joints[0]+joints[2]+joints[3])+2*-math.sin(joints[0]-joints[2]+joints[3])-2*-math.sin(joints[0]+joints[2]-joints[3])+2*-math.sin(joints[0]-joints[2]-joints[3])-3*math.cos(joints[0]+joints[1]+joints[2])+3*math.cos(joints[0]-joints[1]+joints[2])-3*math.cos(joints[0]+joints[1]-joints[2])+3*math.cos(joints[0]-joints[1]-joints[2]) -math.cos(joints[0]+joints[1]+joints[2]+joints[3])+math.cos(joints[0]-joints[1]+joints[2]+joints[3])-math.cos(joints[0]+joints[1]-joints[2]+joints[3])+math.cos(joints[0]-joints[1]-joints[2]+joints[3]) -math.cos(joints[0]+joints[1]+joints[2]-joints[3])+math.cos(joints[0]-joints[1]+joints[2]-joints[3])-math.cos(joints[0]+joints[1]-joints[2]-joints[3])+math.cos(joints[0]-joints[1]-joints[2]-joints[3]))/4,
                          (-2*-math.sin(joints[0]+joints[2]+joints[3])+2*-math.sin(joints[0]-joints[2]+joints[3])-2*-math.sin(joints[0]+joints[2]-joints[3])+2*-math.sin(joints[0]-joints[2]-joints[3]) -2*math.cos(joints[0]+joints[1]+joints[3])-2*math.cos(joints[0]-joints[1]+joints[3])-math.cos(joints[0]+joints[1]+joints[2]+joints[3])+math.cos(joints[0]-joints[1]+joints[2]+joints[3])-math.cos(joints[0]+joints[1]-joints[2]+joints[3])+math.cos(joints[0]-joints[1]-joints[2]+joints[3])+2*math.cos(joints[0]+joints[1]-joints[3])+2*math.cos(joints[0]-joints[1]-joints[3])-math.cos(joints[0]+joints[1]+joints[2]-joints[3])+math.cos(joints[0]-joints[1]+joints[2]-joints[3])-math.cos(joints[0]+joints[1]-joints[2]-joints[3])+math.cos(joints[0]-joints[1]-joints[2]-joints[3]))/4],
                         [0,
                          (3*-math.sin(joints[1]+joints[2])+3*-math.sin(joints[1]-joints[2])+2*-math.sin(joints[1]+joints[3])+-math.sin(joints[1]+joints[2]+joints[3])+-math.sin(joints[1]-joints[2]+joints[3])-2*-math.sin(joints[1]-joints[3])+-math.sin(joints[1]+joints[2]-joints[3])+-math.sin(joints[1]-joints[2]-joints[3])+4)/2,
                          (3*-math.sin(joints[1]+joints[2])+3*-math.sin(joints[1]-joints[2]) +-math.sin(joints[1]+joints[2]+joints[3])+-math.sin(joints[1]-joints[2]+joints[3]) +-math.sin(joints[1]+joints[2]-joints[3])+-math.sin(joints[1]-joints[2]-joints[3])+4)/2,
                          (2*-math.sin(joints[1]+joints[3])+-math.sin(joints[1]+joints[2]+joints[3])+-math.sin(joints[1]-joints[2]+joints[3])-2*-math.sin(joints[1]-joints[3])+-math.sin(joints[1]+joints[2]-joints[3])+-math.sin(joints[1]-joints[2]-joints[3])+4)/2]])
    return jacobian

def control_open(self,image):
    # estimate time step
    cur_time = rospy.get_time()
    dt = cur_time - self.time_previous_step2
    self.time_previous_step2 = cur_time
    q = self.detect_joint_angles(image) # estimate initial value of joints'
    J_inv = np.linalg.pinv(self.calculate_jacobian(image))  # calculating the pseudo inverse of Jacobian
    # desired trajectory
    pos_d= self.trajectory()
    # estimate derivative of desired trajectory
    self.error_d = (pos_d - self.error)/dt
    self.error = pos_d
    q_d = q + (dt * np.dot(J_inv, self.error_d.transpose()))  # desired joint angles to follow the trajectory
    return q_d
